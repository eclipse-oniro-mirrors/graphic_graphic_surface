diff --git a/surface/test/fuzztest/bufferqueueproducer_fuzzer/bufferqueueproducer_fuzzer.cpp b/surface/test/fuzztest/bufferqueueproducer_fuzzer/bufferqueueproducer_fuzzer.cpp
index 08bece987fdbfc978a3208e9345690674f131cd5..60af147daefbcc96eb2d2f1c83629ca61e9c5bc9 100644
--- a/surface/test/fuzztest/bufferqueueproducer_fuzzer/bufferqueueproducer_fuzzer.cpp
+++ b/surface/test/fuzztest/bufferqueueproducer_fuzzer/bufferqueueproducer_fuzzer.cpp
@@ -160,7 +160,6 @@ namespace OHOS {
         int64_t timestamp = GetData<int64_t>();
         BufferFlushConfigWithDamages flushConfig = {.damages =  { rect }, .timestamp = timestamp};
         uint32_t sequence = GetData<uint32_t>();
-        std::vector<Rect> damages;
 
         // test
         std::string name = GetStringFromData(STR_LEN);
@@ -180,7 +179,6 @@ namespace OHOS {
         sptr<SyncFence> syncFence = SyncFence::INVALID_FENCE;
         bqp->FlushBuffer(sequence, bedata, syncFence, flushConfig);
         std::vector<uint32_t> sequences;
-        std::vector<BufferFlushConfigWithDamages> configs;
         std::vector<sptr<BufferExtraData>> bedataimpls;
         std::vector<sptr<SyncFence>> fences;
         std::vector<BufferFlushConfigWithDamages> flushConfigs;
diff --git a/surface/test/fuzztest/nativewindow_fuzzer/nativewindow_fuzzer.cpp b/surface/test/fuzztest/nativewindow_fuzzer/nativewindow_fuzzer.cpp
index 544dbee43348dc3174e7c008eec1663c4ab55091..7a0aa063af766255275934d8523cb9dfc475464e 100644
--- a/surface/test/fuzztest/nativewindow_fuzzer/nativewindow_fuzzer.cpp
+++ b/surface/test/fuzztest/nativewindow_fuzzer/nativewindow_fuzzer.cpp
@@ -116,8 +116,6 @@ namespace OHOS {
         OH_NativeWindow_NativeWindowHandleOpt(nativeWindow, code, brightness);
         code = SET_SDR_WHITE_POINT_BRIGHTNESS;
         OH_NativeWindow_NativeWindowHandleOpt(nativeWindow, code, brightness);
-        code = GetData<int>();
-        OH_NativeWindow_NativeWindowHandleOpt(nativeWindow, code);
     }
 
     void NativeWindowFuzzTest(OHNativeWindow *nativeWindow, OHNativeWindowBuffer *nwBuffer)
@@ -134,7 +132,6 @@ namespace OHOS {
         OHScalingMode scalingMode = GetData<OHScalingMode>();
         OHScalingModeV2 scalingModeV2 = GetData<OHScalingModeV2>();
         NativeWindowRequestBuffer(nativeWindow, &nwBuffer, &fenceFd);
-        NativeObjectReference(nwBuffer);
         NativeWindowFlushBuffer(nativeWindow, nwBuffer, fenceFd, region);
         NativeWindowCancelBuffer(nativeWindow, nwBuffer);
         GetBufferHandleFromNative(nwBuffer);
@@ -173,21 +170,23 @@ namespace OHOS {
         OHIPCParcel *parcel = OH_IPCParcel_Create();
         NativeWindowWriteToParcel(nativeWindow, parcel);
         NativeWindowReadFromParcel(parcel, &nativeWindow);
+        OH_IPCParcel_Destroy(parcel);
         OHNativeWindow *nativeWindowTmp;
         CreateNativeWindowFromSurfaceId(surfaceId, &nativeWindowTmp);
+        DestoryNativeWindow(nativeWindowTmp);
         OH_NativeBuffer_ColorSpace space = GetData<OH_NativeBuffer_ColorSpace>();
         OH_NativeWindow_SetColorSpace(nativeWindow, space);
         OH_NativeWindow_GetColorSpace(nativeWindow, &space);
         OH_NativeBuffer_MetadataKey metaKey = GetData<OH_NativeBuffer_MetadataKey>();
-        int32_t metaSize = GetData<int32_t>();
-        uint8_t len = GetData<uint8_t>();
+        int32_t len = GetData<int32_t>();
         uint8_t buff[len];
         for (int i = 0; i < len; ++i) {
             buff[i] = GetData<uint8_t>();
         }
-        OH_NativeWindow_SetMetadataValue(nativeWindow, metaKey, metaSize, buff);
+        OH_NativeWindow_SetMetadataValue(nativeWindow, metaKey, len, buff);
         uint8_t *checkMetaData;
-        OH_NativeWindow_GetMetadataValue(nativeWindow, metaKey, &metaSize, &checkMetaData);
+        OH_NativeWindow_GetMetadataValue(nativeWindow, metaKey, &len, &checkMetaData);
+        delete checkMetaData;
         std::vector<OHHDRMetaData> metaDatas = {metaData};
         uint32_t sequence = GetData<uint32_t>();
         NativeWindowSetMetaData(nativeWindow, sequence, metaDatas.size(), metaDatas.data());
@@ -222,10 +221,13 @@ namespace OHOS {
         uint32_t seqNum = GetData<uint32_t>();
         sptr<OHOS::SurfaceBuffer> sBuffer = new SurfaceBufferImpl(seqNum);
         OHNativeWindowBuffer* nwBuffer = CreateNativeWindowBufferFromSurfaceBuffer(&sBuffer);
+        DestroyNativeWindowBuffer(nwBuffer);
+        nwBuffer = nullptr;
         HandleOpt(nativeWindow);
         HandleOpt1(nativeWindow);
         NativeWindowFuzzTest(nativeWindow, nwBuffer);
         NativeWindowFuzzTest1(nativeWindow, nwBuffer);
+        DestoryNativeWindow(nativeWindow);
         return true;
     }
 } // namespace OHOS
diff --git a/surface/test/fuzztest/surface_fuzzer/surface_fuzzer.cpp b/surface/test/fuzztest/surface_fuzzer/surface_fuzzer.cpp
index a2a6a084af519bf13e9d9b16f2bd563bc6066d02..a5112c9bb481d999f9601f46fa099a0cbbe1da82 100644
--- a/surface/test/fuzztest/surface_fuzzer/surface_fuzzer.cpp
+++ b/surface/test/fuzztest/surface_fuzzer/surface_fuzzer.cpp
@@ -103,8 +103,16 @@ namespace OHOS {
         cSurface->GetUserData(key);
         cSurface->GetQueueSize();
         cSurface->GetSurfaceSourceType();
-        GraphicExtDataHandle handle = GetData<GraphicExtDataHandle>();
-        cSurface->SetTunnelHandle(&handle);
+        GraphicExtDataHandle *handle = static_cast<GraphicExtDataHandle *>(
+            malloc(sizeof(GraphicExtDataHandle) + sizeof(int32_t)));
+        if (handle != nullptr) {
+            handle->fd = -1;
+            handle->reserveInts = 1;
+            handle->reserve[0] = GetData<int32_t>();
+            cSurface->SetTunnelHandle(handle);
+            free(handle);
+            handle = nullptr;
+        }
         cSurface->GetSurfaceAppFrameworkType();
     }
 
@@ -114,7 +122,10 @@ namespace OHOS {
         std::vector<sptr<SyncFence>> fences;
         BufferRequestConfig config = GetData<BufferRequestConfig>();
         pSurface->RequestBuffers(buffers, fences, config);
-        BufferFlushConfigWithDamages flushConfig = GetData<BufferFlushConfigWithDamages>();
+        BufferFlushConfigWithDamages flushConfig;
+        std::vector<Rect> rects{GetData<Rect>()};
+        flushConfig.damages = rects;
+        flushConfig.timestamp = GetData<int64_t>();
         std::vector<BufferFlushConfigWithDamages> flushConfigs;
         for (size_t i = 0; i < buffers.size(); i++) {
             flushConfigs.emplace_back(flushConfig);
